

1. @ Autowired


org.springframework.beans.factory.annotation.Autowired


@Target(value={CONSTRUCTOR, METHOD, PARAMETER, FIELD, ANNOTATION_TYPE})
@Retention(value=RUNTIME)
@Documented


Marks a constructor, field, setter method, or config method as to be autowired bySpring's dependency injection facilities. This is an alternative to the JSR-330 javax.inject.Inject annotation, adding required-vs-optional semantics. 

Autowired Constructors

Only one constructor of any given bean class may declare this annotation with the required attribute set to true, indicating the constructorto autowire when used as a Spring bean. Furthermore, if the requiredattribute is set to true, only a single constructor may be annotatedwith @Autowired. If multiple non-required constructors declare theannotation, they will be considered as candidates for autowiring. The constructorwith the greatest number of dependencies that can be satisfied by matching beansin the Spring container will be chosen. If none of the candidates can be satisfied,then a primary/default constructor (if present) will be used. Similarly, if aclass declares multiple constructors but none of them is annotated with @Autowired, then a primary/default constructor (if present) will be used.If a class only declares a single constructor to begin with, it will always be used,even if not annotated. An annotated constructor does not have to be public. 

Autowired Fields

Fields are injected right after construction of a bean, before any config methodsare invoked. Such a config field does not have to be public. 

Autowired Methods

Config methods may have an arbitrary name and any number of arguments; each ofthose arguments will be autowired with a matching bean in the Spring container.Bean property setter methods are effectively just a special case of such a generalconfig method. Such config methods do not have to be public. 

Autowired Parameters

Although @Autowired can technically be declared on individual methodor constructor parameters since Spring Framework 5.0, most parts of theframework ignore such declarations. The only part of the core Spring Frameworkthat actively supports autowired parameters is the JUnit Jupiter support inthe spring-test module (see the TestContext frameworkreference documentation for details). 

Multiple Arguments and 'required' Semantics

In the case of a multi-arg constructor or method, the required attributeis applicable to all arguments. Individual parameters may be declared as Java-8 style java.util.Optional or, as of Spring Framework 5.0, also as @Nullableor a not-null parameter type in Kotlin, overriding the base 'required' semantics. 

Autowiring Arrays, Collections, and Maps

In case of an array, java.util.Collection, or java.util.Mapdependency type, the container autowires all beans matching the declared valuetype. For such purposes, the map keys must be declared as type Stringwhich will be resolved to the corresponding bean names. Such a container-providedcollection will be ordered, taking into account Ordered and @Order values of the targetcomponents, otherwise following their registration order in the container.Alternatively, a single matching target bean may also be a generally typed Collection or Map itself, getting injected as such. 

Not supported in BeanPostProcessor or BeanFactoryPostProcessor

Note that actual injection is performed through a BeanPostProcessor which in turn means that you cannotuse @Autowired to inject references into BeanPostProcessor or BeanFactoryPostProcessortypes. Please consult the javadoc for the AutowiredAnnotationBeanPostProcessorclass (which, by default, checks for the presence of this annotation).


2. @ controller
org.springframework.stereotype.Controller


@Target(value={TYPE})
@Component
@Retention(value=RUNTIME)
@Documented


Indicates that an annotated class is a "Controller" (e.g. a web controller). 

This annotation serves as a specialization of @Component,allowing for implementation classes to be autodetected through classpath scanning.It is typically used in combination with annotated handler methods based on the org.springframework.web.bind.annotation.RequestMapping annotation.



3. @ getMapping


org.springframework.web.bind.annotation.GetMapping


@Target(value={METHOD})
@RequestMapping(method={GET})
@Retention(value=RUNTIME)
@Documented


Annotation for mapping HTTP GET requests onto specific handlermethods. 

Specifically, @GetMapping is a composed annotation thatacts as a shortcut for @RequestMapping(method = RequestMethod.GET).


4. @ override
@java.lang.Override


@Target(value={METHOD})
@Retention(value=SOURCE)


Indicates that a method declaration is intended to override amethod declaration in a supertype. If a method is annotated withthis annotation type compilers are required to generate an errormessage unless at least one of the following conditions hold: 
•The method does override or implement a method declared in asupertype. 
•The method has a signature that is override-equivalent to that ofany public method declared in Object. 





5. @ postMapping


org.springframework.web.bind.annotation.PostMapping


@Target(value={METHOD})
@RequestMapping(method={POST})
@Retention(value=RUNTIME)
@Documented


Annotation for mapping HTTP POST requests onto specific handlermethods. 

Specifically, @PostMapping is a composed annotation thatacts as a shortcut for @RequestMapping(method = RequestMethod.POST).


6.  @ Repository


org.springframework.stereotype.Repository


@Target(value={TYPE})
@Component
@Retention(value=RUNTIME)
@Documented


Indicates that an annotated class is a "Repository", originally defined byDomain-Driven Design (Evans, 2003) as "a mechanism for encapsulating storage,retrieval, and search behavior which emulates a collection of objects". 

Teams implementing traditional Java EE patterns such as "Data Access Object"may also apply this stereotype to DAO classes, though care should be taken tounderstand the distinction between Data Access Object and DDD-style repositoriesbefore doing so. This annotation is a general-purpose stereotype and individual teamsmay narrow their semantics and use as appropriate. 

A class thus annotated is eligible for Spring DataAccessException translationwhen used in conjunction with a PersistenceExceptionTranslationPostProcessor. The annotated class is also clarified asto its role in the overall application architecture for the purpose of tooling,aspects, etc. 

As of Spring 2.5, this annotation also serves as a specialization of @Component, allowing for implementation classes to be autodetectedthrough classpath scanning.


7.  @ RequestMapping


org.springframework.web.bind.annotation.RequestMapping


Annotation for mapping web requests onto methods in request-handling classeswith flexible method signatures. 

Both Spring MVC and Spring WebFlux support this annotation through a RequestMappingHandlerMapping and RequestMappingHandlerAdapterin their respective modules and package structure. For the exact list ofsupported handler method arguments and return types in each, please use thereference documentation links below: 
•Spring MVC Method Argumentsand Return Values 
•Spring WebFlux Method Argumentsand Return Values 

Note: This annotation can be used both at the class andat the method level. In most cases, at the method level applications willprefer to use one of the HTTP method specific variants @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, or @PatchMapping.

NOTE: When using controller interfaces (e.g. for AOP proxying),make sure to consistently put all your mapping annotations - such as @RequestMapping and @SessionAttributes - onthe controller interface rather than on the implementation class.




8.  @ RequestParam


org.springframework.web.bind.annotation.RequestParam


@Target(value={PARAMETER})
@Retention(value=RUNTIME)
@Documented


Annotation which indicates that a method parameter should be bound to a webrequest parameter. 

Supported for annotated handler methods in Spring MVC and Spring WebFluxas follows: 
•In Spring MVC, "request parameters" map to query parameters, form data,and parts in multipart requests. This is because the Servlet API combinesquery parameters and form data into a single map called "parameters", andthat includes automatic parsing of the request body. 
•In Spring WebFlux, "request parameters" map to query parameters only.To work with all 3, query, form data, and multipart data, you can use databinding to a command object annotated with ModelAttribute. 

If the method parameter type is Map and a request parameter nameis specified, then the request parameter value is converted to a Mapassuming an appropriate conversion strategy is available. 

If the method parameter is Map<String, String> or MultiValueMap<String, String>and a parameter name is not specified, then the map parameter is populatedwith all request parameter names and values.



9.  @ Service


org.springframework.stereotype.Service


@Target(value={TYPE})
@Component
@Retention(value=RUNTIME)
@Documented


Indicates that an annotated class is a "Service", originally defined by Domain-DrivenDesign (Evans, 2003) as "an operation offered as an interface that stands alone in themodel, with no encapsulated state." 

May also indicate that a class is a "Business Service Facade" (in the Core J2EEpatterns sense), or something similar. This annotation is a general-purpose stereotypeand individual teams may narrow their semantics and use as appropriate. 

This annotation serves as a specialization of @Component,allowing for implementation classes to be autodetected through classpath scanning.



10.  @ SpringBootApplication



org.springframework.boot.autoconfigure.SpringBootApplication


@Target(value={TYPE})
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(excludeFilters={@Filter(type=CUSTOM, classes={TypeExcludeFilter.class}), @Filter(type=CUSTOM, classes={AutoConfigurationExcludeFilter.class})})
@Retention(value=RUNTIME)
@Documented
@Inherited


Indicates a configuration class that declares one or more @Bean methods and also triggers auto-configuration and component scanning. This is a convenienceannotation that is equivalent to declaring @Configuration, @EnableAutoConfiguration and @ComponentScan.



11. Enable Swagger




springfox.documentation.swagger2.annotations.EnableSwagger2


@Target(value={TYPE})
@Import(value={Swagger2DocumentationConfiguration.class})
@Retention(value=RUNTIME)
@Documented


Indicates that Swagger support should be enabled. 

This should be applied to a Spring java config and should have an accompanying '@Configuration' annotation. 

Loads all required beans defined in @see SpringSwaggerConfig
See Also:springfox.documentation.spring.web.plugins.Docket


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



@ configuration

org.springframework.context.annotation.Configuration


@Target(value={TYPE})
@Component
@Retention(value=RUNTIME)
@Documented


Indicates that a class declares one or more @Bean methods andmay be processed by the Spring container to generate bean definitions andservice requests for those beans at runtime, for example: 
 @Configuration
 public class AppConfig {

     @Bean
     public MyBean myBean() {
         // instantiate, configure and return bean ...
     }
 }

Bootstrapping @Configuration classes

Via AnnotationConfigApplicationContext

@Configuration classes are typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext. A simple example with the former follows: 
 AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
 ctx.register(AppConfig.class);
 ctx.refresh();
 MyBean myBean = ctx.getBean(MyBean.class);
 // use myBean ...
 

See the AnnotationConfigApplicationContext javadocs for further details, and see AnnotationConfigWebApplicationContext for web configuration instructions in a Servlet container. 

Via Spring <beans> XML

As an alternative to registering @Configuration classes directly against an AnnotationConfigApplicationContext, @Configuration classes may bedeclared as normal <bean> definitions within Spring XML files: 
 <beans>
    <context:annotation-config/>
    <bean class="com.acme.AppConfig"/>
 </beans>
 

In the example above, <context:annotation-config/> is required in order toenable ConfigurationClassPostProcessor and other annotation-relatedpost processors that facilitate handling @Configuration classes. 

Via component scanning

@Configuration is meta-annotated with @Component, therefore @Configuration classes are candidates for component scanning (typically usingSpring XML's <context:component-scan/> element) and therefore may also takeadvantage of @Autowired/@Injectlike any regular @Component. In particular, if a single constructor is presentautowiring semantics will be applied transparently for that constructor: 
 @Configuration
 public class AppConfig {

     private final SomeBean someBean;

     public AppConfig(SomeBean someBean) {
         this.someBean = someBean;
     }

     // @Bean definition using "SomeBean"

 }

@Configuration classes may not only be bootstrapped usingcomponent scanning, but may also themselves configure component scanning usingthe @ComponentScan annotation: 
 @Configuration
 @ComponentScan("com.acme.app.services")
 public class AppConfig {
     // various @Bean definitions ...
 }

See the @ComponentScan javadocs for details. 

Working with externalized values

Using the Environment API

Externalized values may be looked up by injecting the Spring org.springframework.core.env.Environment into a @Configurationclass — for example, using the @Autowired annotation: 
 @Configuration
 public class AppConfig {

     @Autowired Environment env;

     @Bean
     public MyBean myBean() {
         MyBean myBean = new MyBean();
         myBean.setName(env.getProperty("bean.name"));
         return myBean;
     }
 }

Properties resolved through the Environment reside in one or more "propertysource" objects, and @Configuration classes may contribute property sources tothe Environment object using the @PropertySourceannotation: 
 @Configuration
 @PropertySource("classpath:/com/acme/app.properties")
 public class AppConfig {

     @Inject Environment env;

     @Bean
     public MyBean myBean() {
         return new MyBean(env.getProperty("bean.name"));
     }
 }

See the Environmentand @PropertySource javadocs for further details. 

Using the @Value annotation

Externalized values may be injected into @Configuration classes usingthe @Value annotation: 
 @Configuration
 @PropertySource("classpath:/com/acme/app.properties")
 public class AppConfig {

     @Value("${bean.name}") String beanName;

     @Bean
     public MyBean myBean() {
         return new MyBean(beanName);
     }
 }

This approach is often used in conjunction with Spring's PropertySourcesPlaceholderConfigurer that can be enabled automaticallyin XML configuration via <context:property-placeholder/> or explicitlyin a @Configuration class via a dedicated static @Bean method(see "a note on BeanFactoryPostProcessor-returning @Bean methods" of @Bean's javadocs for details). Note, however, that explicit registrationof a PropertySourcesPlaceholderConfigurer via a static @Beanmethod is typically only required if you need to customize configuration such as theplaceholder syntax, etc. Specifically, if no bean post-processor (such as a PropertySourcesPlaceholderConfigurer) has registered an embedded valueresolver for the ApplicationContext, Spring will register a default embedded value resolver which resolves placeholders against property sourcesregistered in the Environment. See the section below on composing @Configuration classes with Spring XML using @ImportResource; seethe @Value javadocs; and see the @Bean javadocs for detailson working with BeanFactoryPostProcessor types such as PropertySourcesPlaceholderConfigurer. 

Composing @Configuration classes

With the @Import annotation

@Configuration classes may be composed using the @Import annotation,similar to the way that <import> works in Spring XML. Because @Configuration objects are managed as Spring beans within the container,imported configurations may be injected — for example, via constructor injection: 
 @Configuration
 public class DatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return DataSource
     }
 }

 @Configuration
 @Import(DatabaseConfig.class)
 public class AppConfig {

     private final DatabaseConfig dataConfig;

     public AppConfig(DatabaseConfig dataConfig) {
         this.dataConfig = dataConfig;
     }

     @Bean
     public MyBean myBean() {
         // reference the dataSource() bean method
         return new MyBean(dataConfig.dataSource());
     }
 }

Now both AppConfig and the imported DatabaseConfig can be bootstrappedby registering only AppConfig against the Spring context: 
 new AnnotationConfigApplicationContext(AppConfig.class);

With the @Profile annotation

@Configuration classes may be marked with the @Profile annotation toindicate they should be processed only if a given profile or profiles are active: 
 @Profile("development")
 @Configuration
 public class EmbeddedDatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return embedded DataSource
     }
 }

 @Profile("production")
 @Configuration
 public class ProductionDatabaseConfig {

     @Bean
     public DataSource dataSource() {
         // instantiate, configure and return production DataSource
     }
 }

Alternatively, you may also declare profile conditions at the @Bean method level — for example, for alternative bean variants within the same configuration class: 
 @Configuration
 public class ProfileDatabaseConfig {

     @Bean("dataSource")
     @Profile("development")
     public DataSource embeddedDatabase() { ... }

     @Bean("dataSource")
     @Profile("production")
     public DataSource productionDatabase() { ... }
 }

See the @Profile and org.springframework.core.env.Environmentjavadocs for further details. 

With Spring XML using the @ImportResource annotation

As mentioned above, @Configuration classes may be declared as regular Spring <bean> definitions within Spring XML files. It is also possible toimport Spring XML configuration files into @Configuration classes usingthe @ImportResource annotation. Bean definitions imported fromXML can be injected — for example, using the @Inject annotation: 
 @Configuration
 @ImportResource("classpath:/com/acme/database-config.xml")
 public class AppConfig {

     @Inject DataSource dataSource; // from XML

     @Bean
     public MyBean myBean() {
         // inject the XML-defined dataSource bean
         return new MyBean(this.dataSource);
     }
 }

With nested @Configuration classes

@Configuration classes may be nested within one another as follows: 
 @Configuration
 public class AppConfig {

     @Inject DataSource dataSource;

     @Bean
     public MyBean myBean() {
         return new MyBean(dataSource);
     }

     @Configuration
     static class DatabaseConfig {
         @Bean
         DataSource dataSource() {
             return new EmbeddedDatabaseBuilder().build();
         }
     }
 }

When bootstrapping such an arrangement, only AppConfig need be registeredagainst the application context. By virtue of being a nested @Configurationclass, DatabaseConfig will be registered automatically. This avoidsthe need to use an @Import annotation when the relationship between AppConfig and DatabaseConfig is already implicitly clear. 

Note also that nested @Configuration classes can be used to good effectwith the @Profile annotation to provide two options of the same bean to theenclosing @Configuration class. 

Configuring lazy initialization

By default, @Bean methods will be eagerly instantiated at containerbootstrap time. To avoid this, @Configuration may be used in conjunction withthe @Lazy annotation to indicate that all @Bean methods declaredwithin the class are by default lazily initialized. Note that @Lazy may be usedon individual @Bean methods as well. 

Testing support for @Configuration classes

The Spring TestContext framework available in the spring-test moduleprovides the @ContextConfiguration annotation which can accept an array of component class references — typically @Configuration or @Component classes. 
 @RunWith(SpringRunner.class)
 @ContextConfiguration(classes = {AppConfig.class, DatabaseConfig.class})
 public class MyTests {

     @Autowired MyBean myBean;

     @Autowired DataSource dataSource;

     @Test
     public void test() {
         // assertions against myBean ...
     }
 }

See the TestContext frameworkreference documentation for details. 

Enabling built-in Spring features using @Enable annotations

Spring features such as asynchronous method execution, scheduled task execution,annotation driven transaction management, and even Spring MVC can be enabled andconfigured from @Configuration classes using their respective "@Enable"annotations. See @EnableAsync, @EnableScheduling, @EnableTransactionManagement, @EnableAspectJAutoProxy,and @EnableWebMvcfor details. 

Constraints when authoring @Configuration classes
•Configuration classes must be provided as classes (i.e. not as instances returnedfrom factory methods), allowing for runtime enhancements through a generated subclass. 
•Configuration classes must be non-final (allowing for subclasses at runtime),unless the proxyBeanMethods flag is set to falsein which case no runtime-generated subclass is necessary. 
•Configuration classes must be non-local (i.e. may not be declared within a method). 
•Any nested configuration classes must be declared as static. 
•@Bean methods may not in turn create further configuration classes(any such instances will be treated as regular beans, with their configurationannotations remaining undetected). 




---------------------------------------------------------------------------------------------------------------------------------------------------------------



@ Bean


org.springframework.context.annotation.Bean


@Target(value={METHOD, ANNOTATION_TYPE})
@Retention(value=RUNTIME)
@Documented


Indicates that a method produces a bean to be managed by the Spring container. 

Overview

The names and semantics of the attributes to this annotation are intentionallysimilar to those of the <bean/> element in the Spring XML schema. Forexample: 
     @Bean
     public MyBean myBean() {
         // instantiate and configure MyBean obj
         return obj;
     }
 

Bean Names

While a name attribute is available, the default strategy fordetermining the name of a bean is to use the name of the @Bean method.This is convenient and intuitive, but if explicit naming is desired, the name attribute (or its alias value) may be used. Also notethat name accepts an array of Strings, allowing for multiple names(i.e. a primary bean name plus one or more aliases) for a single bean. 
     @Bean({"b1", "b2"}) // bean available as 'b1' and 'b2', but not 'myBean'
     public MyBean myBean() {
         // instantiate and configure MyBean obj
         return obj;
     }
 

Profile, Scope, Lazy, DependsOn, Primary, Order

Note that the @Bean annotation does not provide attributes for profile,scope, lazy, depends-on or primary. Rather, it should be used in conjunction with @Scope, @Lazy, @DependsOn and @Primary annotations to declare those semantics. For example: 
     @Bean
     @Profile("production")
     @Scope("prototype")
     public MyBean myBean() {
         // instantiate and configure MyBean obj
         return obj;
     }
 
The semantics of the above-mentioned annotations match their use at the componentclass level: @Profile allows for selective inclusion of certain beans. @Scope changes the bean's scope from singleton to the specified scope. @Lazy only has an actual effect in case of the default singleton scope. @DependsOn enforces the creation of specific other beans before thisbean will be created, in addition to any dependencies that the bean expressedthrough direct references, which is typically helpful for singleton startup. @Primary is a mechanism to resolve ambiguity at the injection point levelif a single target component needs to be injected but several beans match by type. 
Additionally, @Bean methods may also declare qualifier annotationsand @Order values, to betaken into account during injection point resolution just like correspondingannotations on the corresponding component classes but potentially being veryindividual per bean definition (in case of multiple definitions with the samebean class). Qualifiers narrow the set of candidates after the initial type match;order values determine the order of resolved elements in case of collectioninjection points (with several target beans matching by type and qualifier). 

NOTE: @Order values may influence priorities at injection points,but please be aware that they do not influence singleton startup order which is anorthogonal concern determined by dependency relationships and @DependsOndeclarations as mentioned above. Also, javax.annotation.Priority is notavailable at this level since it cannot be declared on methods; its semantics canbe modeled through @Order values in combination with @Primary ona single bean per type. 

@Bean Methods in @Configuration Classes

Typically, @Bean methods are declared within @Configurationclasses. In this case, bean methods may reference other @Bean methods in thesame class by calling them directly. This ensures that references between beansare strongly typed and navigable. Such so-called 'inter-bean references' areguaranteed to respect scoping and AOP semantics, just like getBean() lookupswould. These are the semantics known from the original 'Spring JavaConfig' projectwhich require CGLIB subclassing of each such configuration class at runtime. As aconsequence, @Configuration classes and their factory methods must not bemarked as final or private in this mode. For example: 
 @Configuration
 public class AppConfig {

     @Bean
     public FooService fooService() {
         return new FooService(fooRepository());
     }

     @Bean
     public FooRepository fooRepository() {
         return new JdbcFooRepository(dataSource());
     }

     // ...
 }

@Bean Lite Mode

@Bean methods may also be declared within classes that are notannotated with @Configuration. For example, bean methods may be declaredin a @Component class or even in a plain old class. In such cases,a @Bean method will get processed in a so-called 'lite' mode. 

Bean methods in lite mode will be treated as plain factorymethods by the container (similar to factory-method declarationsin XML), with scoping and lifecycle callbacks properly applied. The containingclass remains unmodified in this case, and there are no unusual constraints forthe containing class or the factory methods. 

In contrast to the semantics for bean methods in @Configuration classes, 'inter-bean references' are not supported in lite mode. Instead,when one @Bean-method invokes another @Bean-method in litemode, the invocation is a standard Java method invocation; Spring does not interceptthe invocation via a CGLIB proxy. This is analogous to inter-@Transactionalmethod calls where in proxy mode, Spring does not intercept the invocation — Spring does so only in AspectJ mode. 

For example: 
 @Component
 public class Calculator {
     public int sum(int a, int b) {
         return a+b;
     }

     @Bean
     public MyBean myBean() {
         return new MyBean();
     }
 }

Bootstrapping

See the @Configuration javadoc for further details including how to bootstrapthe container using AnnotationConfigApplicationContext and friends. 

BeanFactoryPostProcessor-returning @Bean methods

Special consideration must be taken for @Bean methods that return Spring BeanFactoryPostProcessor(BFPP) types. Because BFPP objects must be instantiated very early in thecontainer lifecycle, they can interfere with processing of annotations such as @Autowired, @Value, and @PostConstruct within @Configuration classes. To avoid theselifecycle issues, mark BFPP-returning @Bean methods as static. For example: 
     @Bean
     public static PropertySourcesPlaceholderConfigurer pspc() {
         // instantiate, configure and return pspc ...
     }
 
By marking this method as static, it can be invoked without causing instantiation of itsdeclaring @Configuration class, thus avoiding the above-mentioned lifecycle conflicts.Note however that static @Bean methods will not be enhanced for scoping and AOPsemantics as mentioned above. This works out in BFPP cases, as they are not typicallyreferenced by other @Bean methods. As a reminder, an INFO-level log message will beissued for any non-static @Bean methods having a return type assignable to BeanFactoryPostProcessor.